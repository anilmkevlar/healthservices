version: "3"
name: healthservice
services:
  fhir-server:
    build: 
      context: fhir-server/
      dockerfile: build/docker/Dockerfile
      args:
        FHIR_VERSION: ${FHIR_VERSION:-"R5"}
        ASSEMBLY_VER: "1"
    platform: linux/amd64
    environment:
      FHIRServer__Security__Enabled: "false"
      SqlServer__ConnectionString: "Server=tcp:fhir-sql,1433;Initial Catalog=FHIR;Persist Security Info=False;User ID=sa;Password=${FHIR_SQL_SA_PASSWORD:-L0ca1P@ssw0rd};MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true;"
      SqlServer__AllowDatabaseCreation: "true"
      SqlServer__Initialize: "true"
      SqlServer__SchemaOptions__AutomaticUpdatesEnabled: "true"
      DataStore: "SqlServer"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://fhir-server:8080/metadata?_format=json"]
      interval: 10s
      retries: 5
      timeout: 10s
    ports:     
      - "${FHIR_SERVER_PORT_RANGE:-11101-11199}:8080"
    depends_on:
      fhir-sql :
       condition: service_healthy
  fhir-sql:
    image: "mcr.microsoft.com/mssql/server"
    user: root
    volumes:
       - fhirSqlDb:/var/opt/mssql/data
    environment:
      SA_PASSWORD: ${FHIR_SQL_SA_PASSWORD:-L0ca1P@ssw0rd}
      ACCEPT_EULA: "Y"
    healthcheck:
        test: ["CMD", "/opt/mssql-tools/bin/sqlcmd","-U sa -P ${FHIR_SQL_SA_PASSWORD:-L0ca1P@ssw0rd} -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'"]
        interval: 10s
        timeout: 10s
        retries: 6
    ports:     
      - "${FHIR_SQL_PORT_RANGE:-11201-11299}:1433" 
  fhir-data:
    build: 
      context: fhirLoader-automate/
      dockerfile: Dockerfile
      args:
        SYNTHEA_ARGS: ${FHIR_DATA_SYNTHEA_ARGS:-"-p 25"}
    platform: linux/amd64
    environment:
        Fhir_Endpoint: "http://fhir-server:8080"
    depends_on:
      fhir-server:
        condition: service_healthy
  dicomserver:
    build:
      context: dicom-server/
      dockerfile: src/Microsoft.Health.Dicom.Web/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
        CONTINUOUS_INTEGRATION_BUILD: ${ContinuousIntegrationBuild:-true}
    platform: linux/amd64
    environment:
      AzureWebJobsStorage: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:8080"
      BlobStore__ConnectionString: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;"
      DicomFunctions__DurableTask__ConnectionName: "AzureWebJobsStorage"
      DicomFunctions__Indexing__Batching__MaxParallelCount: "1"
      SqlServer__AllowDatabaseCreation: "true"
      SqlServer__ConnectionString: "Server=tcp:dicom-sql,1433;Initial Catalog=Dicom;Persist Security Info=False;User ID=sa;Password=Fhir#1234;MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true"
      SqlServer__Initialize: "true"
    ports:
      - "${DICOM_SERVER_PORT_RANGE:-11301-11399}:8080"
    restart: on-failure
    depends_on:
      - functions
      - azurite
      - dicom-sql
  dicom-sql:
    build: 
      context: dicom-server/
      dockerfile: docker/sql/Dockerfile
    volumes:
       - dicomSqlDb:/var/opt/mssql/data
    environment:
      SA_PASSWORD: ${DICOM_SQL_SA_PASSWORD:-L0ca1P@ssw0rd}
      ACCEPT_EULA: "Y"
    healthcheck:
        test: ["CMD", "/opt/mssql-tools/bin/sqlcmd","-U sa -P ${DICOM_SQL_SA_PASSWORD:-L0ca1P@ssw0rd} -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'"]
        interval: 10s
        timeout: 10s
        retries: 6
    ports:     
      - "${DICOM_SQL_PORT_RANGE:-11401-11499}:1433"
  functions:
    build:
      # While Container Tools are said to support Azure Functions, it does not appear that
      # Docker Compose projects support them. So for now the Dockerfile is kept in a folder separate from the project file
      context: dicom-server/
      dockerfile: src/Microsoft.Health.Dicom.Functions.App/Docker/Dockerfile
      args:
        BUILD_CONFIGURATION: Release
        CONTINUOUS_INTEGRATION_BUILD: ${ContinuousIntegrationBuild:-false}
    platform: linux/amd64
    environment:
      AzureFunctionsJobHost__BlobStore__ConnectionString: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;"
      AzureFunctionsJobHost__Logging__Console__IsEnabled: "true"
      AzureFunctionsJobHost__SqlServer__ConnectionString: "Server=tcp:dicom-sql,1433;Initial Catalog=Dicom;Persist Security Info=False;User ID=sa;Password=${DICOM_SQL_SA_PASSWORD:-L0ca1P@ssw0rd};MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true"
      AzureWebJobsStorage: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;"
      AZURE_FUNCTIONS_ENVIRONMENT: "Development"
      WEBSITE_HOSTNAME: "localhost:8080"
      APPINSIGHTS_INSTRUMENTATIONKEY: "00000000-0000-0000-0000-000000000000" # required to configure telemetry client even when running locally
    ports:
      - "${DICOM_FUNCTION_PORT_RANGE:-11501-11599}:8080"
    restart: on-failure
    depends_on:
      - azurite
  azurite:
    # See here for tags: https://mcr.microsoft.com/en-us/product/azure-storage/azurite/tags
    image: mcr.microsoft.com/azure-storage/azurite:latest
    # # These port bindings [source]:[dest] can be uncommented to connect to the storage emulator via Microsoft Azure Storage Explorer
    # # Note that the source ports may need to change if a storage emulator is already running on localhost
    ports:
     - "10001:10001"
     - "10000:10000"
     - "10002:10002"
  dicomcast:
    build:
      context: dicom-server/
      dockerfile: converter/dicom-cast/src/Microsoft.Health.DicomCast.Hosting/Dockerfile
    environment:
      TableStore__ConnectionString: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://azurite:10002/devstoreaccount1;"
      Fhir__Endpoint: "http://fhir-server:8080"
      DicomWeb__endpoint: "http://dicomserver:8080"
      DicomCastWorker__PollInterval: "00:00:05"
      Logging__Console__IncludeScopes: "true"
      Patient__PatientSystemId: "patientSystemId"
      Patient__IsIssuerIdUsed: false
    restart: always
    depends_on:
      - azurite
      - fhir-server
      - dicomserver
volumes:
  fhirSqlDb:
    external: true
  dicomSqlDb:
    external: true